require('dotenv').config();
const TeleBot = require('telebot');
const mongoose = require('mongoose');
const async = require('async');
const moment = require('moment');

const regexps = require('./regexp/regexp');
const parseDungeon = require('./parsers/parseDungeon');
const {
  regExpSetMatcher,
} = require('./utils/matcher');
const validateForwardDate = require('./utils/validateForwardDate');
const getDump = require('./utils/getDump');
const detectDungeon = require('./utils/detectDungeon');
const dungeonSchema = require('./schemes/dungeon');

const Dungeon = mongoose.model('Dungeon', dungeonSchema);

mongoose.connect(process.env.MONGODB_URI);
const bot = new TeleBot(process.env.BOT_TOKEN);
let dumpFile;

const dumpStatuses = {
  NOT_READY: 0,
  READY: 1,
};

const botState = { dumpStatus: dumpStatuses.NOT_READY };

setTimeout(() => {
  botState.dumpStatus = dumpStatuses.NOT_READY;

  getDump(Dungeon, (dump) => {
    dumpFile = Buffer.from(JSON.stringify(dump));
    botState.dumpStatus = dumpStatuses.READY;
  });
}, 10000);

getDump(Dungeon, (dump) => {
  dumpFile = Buffer.from(JSON.stringify(dump));
  botState.dumpStatus = dumpStatuses.READY;
});

const sessions = {};

const createSession = (id) => {
  sessions[id] = {
    state: 'WAIT_FOR_FORWARD',
    data: [],
  };
};

const defaultKeyboard = bot.keyboard([
  ['üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∞—á–∫—É', 'üíæ –°–∫–∞—á–∞—Ç—å –¥–∞–º–ø'],
], {
  resize: true,
});

const setState = (id, state) => {
  sessions[id].state = state;
};

const getState = (id) => {
  if (sessions[id] !== undefined) {
    return sessions[id].state;
  }

  return null;
};

const getSessionData = id => sessions[id].data || null;

const pushSessionData = (id, data) => {
  sessions[id].data.push(data);
};

const updateDungeons = (msg, dungeons) => {
  let dupes = 0;

  async.forEach(dungeons, (iDungeon, next) => {
    Dungeon.findOne({ name: iDungeon.name }).then((dungeon) => {
      const isForwardDupe = dungeon.toJSON().forwards.some(({ stamp }) => stamp === iDungeon.stamp);

      if (!isForwardDupe) {
        dungeon.forwards.push(iDungeon);

        dungeon.markModified('forwards');
      } else {
        dupes += 1;
      }

      dungeon.save(() => {
        next();
      });
    });
  }, () => {
    const allDupes = dupes === dungeons.length;
    const someDupes = dupes > 0;
    const someDupesReply = someDupes ? '\n–ë—ã–ª–∏ –∑–∞–º–µ—á–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã.' : '';
    if (allDupes) {
      msg.reply.text('–Ø –Ω–µ —É–≤–∏–¥–µ–ª –Ω–æ–≤—ã—Ö —Ñ–æ—Ä–≤–∞—Ä–¥–æ–≤', {
        replyMarkup: defaultKeyboard,
      });
    } else {
      msg.reply.text(`–Ø —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª —ë—ë –≤ –±–∞–∑—É${someDupesReply}`, {
        replyMarkup: defaultKeyboard,
      });
    }

    createSession(msg.from.id);
  });
};

bot.on(['/start', '/help'], (msg) => {
  createSession(msg.from.id);

  return msg.reply.text(`–ü—Ä–∏–≤–µ—Ç, —è –ü–ê–ü–∞ - ¬´<b>–ü–∏–∑–¥–∞—Ç—ã–π –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ü–æ–¥–∑–µ–º–µ–ª–µ–π</b>¬ª.
–ú–µ–Ω—è —Å–æ–∑–¥–∞–ª–∏ –º–Ω–æ–≥–æ —Ç—ã—Å—è—á—å –ª–µ—Ç –Ω–∞–∑–∞–¥. –ò –≤—Å—ë –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —Ä–∞–∑–≥–∞–¥–∞—Ç—å —Å–µ–∫—Ä–µ—Ç –≥–∞–∑–µ—Ç–æ–∫.

–û—Ç–ø—Ä–∞–≤–ª—è–π –º–Ω–µ —Ñ–æ—Ä–≤–∞—Ä–¥ —Å –ª—É—Ç–æ–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–¥–∑–µ–º–µ–ª–∏–π, —è –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—é:<code>
  ‚¨¶ 11–∫–º - –°—Ç–∞—Ä–∞—è –®–∞—Ö—Ç–∞
  ‚¨¶ 19–∫–º - –ü–µ—â–µ—Ä–∞ –û—Ä–µ–æ–ª–∞
  ‚¨¶ 23–∫–º - –°—Ç–æ—á–Ω–∞—è —Ç—Ä—É–±–∞
  ‚¨¶ 29–∫–º - –û—Ç–∫—Ä—ã—Ç–æ–µ —É–±–µ–∂–∏—â–µ
  ‚¨¶ 34–∫–º - –ë—ç—Ç-–ü–µ—â–µ—Ä–∞
  ‚¨¶ 39–∫–º - –ü–µ—Ä–µ–≤–∞–ª –£—Ç–∫–∏–Ω–∞
  ‚¨¶ 45–∫–º - –í—ã—Å–æ–∫–∏–π –•—Ä–æ—Ç–≥–∞—Ä
  ‚¨¶ 50–∫–º - –†—É–∏–Ω—ã –ì–µ–∫—Å–∞–≥–æ–Ω–∞
  ‚¨¶ 56–∫–º - –ù–∞—É—á–Ω—ã–π –ö–æ–º–ø–ª–µ–∫—Å
  ‚¨¶ 69–∫–º - –•—Ä–∞–º –ó–Ω–∞–Ω–∏–π
  ‚¨¶ 74–∫–º - –ß–µ—Ä–Ω–∞—è –ú–µ–∑–∞
  ‚¨¶ 80–∫–º - –û–≥–Ω–µ–Ω–Ω—ã–µ –ù–µ–¥—Ä–∞</code>


–°–≤—è–∑—å —Å –º–æ–∏–º –º–∞—Å—Ç–µ—Ä–æ–º (–µ–º—É —Å—Ç–æ–∏—Ç —Å–æ–æ–±—â–∞—Ç—å –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –±–∞–≥–∞—Ö) - @eko24
–ß–∞—Ç –ø–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é –ø—É—Å—Ç–æ—à–∏ - @RI_Agroprom

–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ /faq.`, {
    parseMode: 'html',
    webPreview: false,
    replyMarkup: defaultKeyboard,
  });
});

bot.on('text', (msg) => {
  switch (msg.text) {
    case 'üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∞—á–∫—É':
      setState(msg.from.id, 'WAIT_FOR_FORWARDS');

      return msg.reply.text('–û–∫–µ–π, –∂–¥—É —Ç–≤–æ–∏ —Ñ–æ—Ä–≤–∞—Ä–¥—ã. –ö–∞–∫ –∑–∞–∫–æ–Ω—á–∏—à—å - –∂–º–∏ –°—Ç–æ–ø', {
        replyMarkup: bot.keyboard([
          ['–°—Ç–æ–ø'],
        ], {
          resize: true,
          once: true,
          remove: true,
        }),
      });
    case '–°—Ç–æ–ø': {
      const sessionData = getSessionData(msg.from.id);

      if (sessionData !== null) {
        return updateDungeons(msg, sessionData);
      }

      return msg.reply.text('–°–æ—Ä—è–Ω, –ø–æ—Ö–æ–∂–µ –º–µ–Ω—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª –∫–∞–∫–æ–π-—Ç–æ –ø–∏–¥–æ—Ä');
    }

    case 'üíæ –°–∫–∞—á–∞—Ç—å –¥–∞–º–ø': {
      if (botState.dumpStatus === dumpStatuses.READY) {
        return msg.reply.file(dumpFile, {
          fileName: `dungeon-${moment().format('DD-MM-YYYY')}.json`,
          caption: '–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –¥–∞–º–ø –Ω–∞ —Å–∞–π—Ç–µ https://eko24ive.github.io/dungeon-loot-browser/',
        });
      }

      return msg.reply.text('–î–∞–º–ø –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤', {
        asReply: true,
      });
    }

    default:
      return null;
  }
});


bot.on('forward', (msg) => {
  if (msg.forward_from.id !== 430930191) {
    return msg.reply.text(`
–¢—ã –∑–∞—ë–±–∞–ª. –§–æ—Ä–≤–∞—Ä–¥—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ—Ç @WastelandWarsBot.
            `, {
      asReply: true,
    });
  }

  if (!validateForwardDate(msg.forward_date)) {
    return msg.reply.text('‚ùå<b>–ó–ê–ú–ï–ß–ï–ù–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê</b>‚ùå\n\n–ë—ã–ª –∑–∞–º–µ—á–µ–Ω —Ñ–æ—Ä–≤–∞—Ä–¥, –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä–æ–≥–æ –º–µ–Ω—å—à–µ, —á–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Wasteland Wars (19.09.2018)', {
      asReply: true,
      parseMode: 'html',
    });
  }

  if (regExpSetMatcher(msg.text, {
    regexpSet: regexps.dungeon,
  })) {
    const dungeonName = detectDungeon(msg.text);
    const state = getState(msg.from.id);

    if (dungeonName !== null) {
      const dungeonData = parseDungeon(msg.text);

      const dungeon = {
        name: dungeonName,
        ...dungeonData,
        stamp: `${msg.from.id}+${msg.forward_date}`,
        time: msg.forward_date,
        user: {
          username: msg.from.username,
          id: msg.from.id,
        },
      };

      if (state !== null) {
        if (state === 'WAIT_FOR_FORWARDS') {
          pushSessionData(msg.from.id, dungeon);
        } else {
          updateDungeons(msg, [
            dungeon,
          ]);
        }
      } else {
        updateDungeons(msg, [
          dungeon,
        ]);
      }
    }
  } else {
    return msg.reply.text('–ü—Ä–æ—Å—Ç–∏, –Ω–æ —ç—Ç–æ—Ç —Ñ–æ—Ä–≤–∞—Ä–¥ –º–µ–Ω—è –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç :—Å');
  }

  return null;
});


bot.on('/faq', msg => msg.reply.text(`
1. –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —Å–∫–∏–Ω—É—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ä–≤–∞—Ä–¥–æ–≤ - —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–µ–∂–∏–º–æ–º "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ü–∞—á–∫—É". –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –±–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ —Ç–µ–±—è "–∑–∞–º—å—é—Ç–∏—Ç" –Ω–∞ –¥–≤–µ-—Ç—Ä–∏ –º–∏–Ω—É—Ç—ã.

3. –§–æ—Ä–≤–∞—Ä–¥ —Å –ª—É—Ç–æ–º –≤—ã–≥–ª—è–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:<code>
[Forwarded from Wasteland Wars]
{–¢–µ–∫—Å—Ç–æ–≤–∫–∞ "–∫–æ–Ω—Ü–∞" –ø–æ–¥–∑–µ–º–µ–ª—å—è}
–ù–∞–π–¥–µ–Ω–æ: üï≥{–∫—Ä—ã—à–∫–∏} –∏ üì¶{–º–µ—Ç–µ—Ä–∏–∞–ª—ã}
–ù–∞–π–¥–µ–Ω–æ:
{–≤–æ–∑–º–æ–∂–Ω–∞—è —à–º–æ—Ç–∫–∞}
{–æ—Å—Ç–∞–ª—å–Ω–æ–π –ª—É—Ç}
</code>

2. –ë–æ—Ç –≤—ã–¥–∞—ë—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ –¥–∞–º–ø–∞. –î–∞–º–ø –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç. –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–º–ø–∞ - https://eko24ive.github.io/dungeon-loot-browser/
`));

bot.start();
